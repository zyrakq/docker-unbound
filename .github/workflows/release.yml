name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0, v1.1.0)'
        required: true
        type: string
      branch:
        description: 'Branch to release from'
        required: true
        default: 'master'
        type: string
      create_tag:
        description: 'Create git tag'
        required: true
        default: true
        type: boolean
      platforms:
        description: 'Platforms to build for'
        required: true
        default: 'linux/amd64,linux/arm64'
        type: string
      run_tests:
        description: 'Run comprehensive tests'
        required: true
        default: true
        type: boolean
      run_security_scan:
        description: 'Run security vulnerability scan'
        required: true
        default: true
        type: boolean
      run_performance_test:
        description: 'Run performance tests'
        required: true
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      tag_exists: ${{ steps.check-tag.outputs.exists }}
      should_create_tag: ${{ steps.validate.outputs.should_create_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid release version format: $VERSION"
            echo "Expected format: v1.0.0 (no pre-release suffixes for releases)"
            exit 1
          fi
          echo "‚úÖ Release version format is valid: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should_create_tag=${{ github.event.inputs.create_tag }}" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check-tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag $VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Tag $VERSION does not exist"
          fi

  create-tag:
    runs-on: ubuntu-latest
    needs: validate-and-prepare
    if: needs.validate-and-prepare.outputs.tag_exists == 'false' && needs.validate-and-prepare.outputs.should_create_tag == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          echo "‚úÖ Created and pushed tag: $VERSION"

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, create-tag]
    if: always() && needs.validate-and-prepare.result == 'success' && (needs.create-tag.result == 'success' || needs.create-tag.result == 'skipped')
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-and-prepare.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-and-prepare.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-and-prepare.outputs.version }}
            type=raw,value=latest,enable=${{ github.event.inputs.branch == 'master' }}
          labels: |
            org.opencontainers.image.title=Unbound DNS Server
            org.opencontainers.image.description=Flexible and configurable Unbound DNS server with DoT, DNSSEC support
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ needs.validate-and-prepare.outputs.version }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ github.event.inputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-docker:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, build-and-publish]
    if: needs.build-and-publish.result == 'success' && github.event.inputs.run_tests == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Docker image
        uses: ./.github/actions/test-docker
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-and-prepare.outputs.version }}
          port: '5353'
          timeout: '30'

  security-scan:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, build-and-publish]
    if: needs.build-and-publish.result == 'success' && github.event.inputs.run_security_scan == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security scan
        uses: ./.github/actions/security-scan
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-and-prepare.outputs.version }}
          format: 'table'
          severity: 'MEDIUM'
          upload-sarif: 'true'

  performance-test:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, build-and-publish]
    if: needs.build-and-publish.result == 'success' && github.event.inputs.run_performance_test == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run performance tests
        uses: ./.github/actions/performance-test
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-and-prepare.outputs.version }}
          duration: '60s'
          concurrent-queries: '10'
          port: '5353'

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, build-and-publish, test-docker, security-scan]
    if: always() && needs.build-and-publish.result == 'success' && (needs.test-docker.result == 'success' || needs.test-docker.result == 'skipped') && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-and-prepare.outputs.version }}
          name: Release ${{ needs.validate-and-prepare.outputs.version }}
          body: |
            ## üê≥ Docker Images
            
            - `ghcr.io/${{ github.repository }}:${{ needs.validate-and-prepare.outputs.version }}`
            - `ghcr.io/${{ github.repository }}:latest`
            
            ## üèóÔ∏è Platforms
            
            - linux/amd64
            - linux/arm64
            
            ## üöÄ Usage
            
            ```bash
            docker run -d \
              --name unbound \
              -p 53:53/udp \
              -p 53:53/tcp \
              ghcr.io/${{ github.repository }}:${{ needs.validate-and-prepare.outputs.version }}
            ```
            
            ## ‚öôÔ∏è Configuration
            
            For detailed configuration options, see the [README](README.md).
            
            ## üß™ Test Results
            
            - ‚úÖ Docker functionality tests: ${{ needs.test-docker.result || 'skipped' }}
            - üîí Security scan: ${{ needs.security-scan.result || 'skipped' }}
            - ‚ö° Performance tests: ${{ needs.performance-test.result || 'skipped' }}
          draft: false
          prerelease: false